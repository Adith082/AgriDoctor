package com.visionaryproviders.agridoctor.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.beans.factory.annotation.Value;


import com.visionaryproviders.agridoctor.payloads.ApiResponse;
import com.visionaryproviders.agridoctor.payloads.FeedBackDto;
import com.visionaryproviders.agridoctor.services.FeedBackServices;
import com.visionaryproviders.agridoctor.services.FileServices;

import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
@RestController
@CrossOrigin(origins = "https://therap-javafest-agridoctor.vercel.app")
@RequestMapping("/api")

public class FeedBackControllers {
	
	@Autowired
	private FeedBackServices feedBackService;
	
	@Autowired
	private FileServices fileService;
	
	@Value("${project.image}")
	private String path;
	
	
	@PostMapping("/user/{userId}/feedback")
	public ResponseEntity<FeedBackDto> createFeedBack(@RequestBody FeedBackDto feedBackDto, @PathVariable Integer userId) {
		FeedBackDto createFeedBack = this.feedBackService.createFeedBack(feedBackDto, userId);
		return new ResponseEntity<FeedBackDto>(createFeedBack, HttpStatus.CREATED);
	}
	
	
	// get all feedbacks by user
         
		@GetMapping("/user/{userId}/feedbacks")
		public ResponseEntity<List<FeedBackDto>> getFeedBacksByUser(@PathVariable Integer userId) {

			List<FeedBackDto> posts = this.feedBackService.getFeedBacksByUser(userId);
			return new ResponseEntity<List<FeedBackDto>>(posts, HttpStatus.OK);

		}
		
		
		
		// get all feedbacks
		@PreAuthorize("hasAuthority('ROLE_ADMIN')")
		@GetMapping("/feedbacks")
		public ResponseEntity <List<FeedBackDto>> getAllFeedBack(){
			List <FeedBackDto> allFeedBack = this.feedBackService.getAllFeedBack();
			return new ResponseEntity<List<FeedBackDto>>(allFeedBack,HttpStatus.OK);
		}
		
		
		
		// get feedBack details by feedBackid

		@GetMapping("/feedbacks/{feedBackId}")
		public ResponseEntity<FeedBackDto> getFeedBackById(@PathVariable Integer feedBackId) {

			FeedBackDto feedBackDto = this.feedBackService.getFeedBackById(feedBackId);
			return new ResponseEntity<FeedBackDto>(feedBackDto, HttpStatus.OK);

		}

	
		
		// delete feedBack
		@DeleteMapping("/feedbacks/{feedBackId}")
		public ApiResponse deleteFeedBack(@PathVariable Integer feedBackId) {
			this.feedBackService.deleteFeedBack(feedBackId);
			return new ApiResponse("FeedBack is successfully deleted !!", true);
		}

		// update post

		@PutMapping("/feedbacks/{feedBackId}")
		public ResponseEntity<FeedBackDto> updateFeedBack(@RequestBody FeedBackDto feedBackDto, @PathVariable Integer feedBackId) {

			FeedBackDto updateFeedBack = this.feedBackService.updateFeedback(feedBackDto, feedBackId);
			return new ResponseEntity<FeedBackDto>(updateFeedBack, HttpStatus.OK);

		}
		
		// Feedback image upload
		@PostMapping("/feedback/image/upload/{feedBackId}")
		public ResponseEntity<FeedBackDto> uploadFeedBackImage(@RequestParam("image") MultipartFile image,
				@PathVariable Integer feedBackId) throws IOException {

			FeedBackDto feedBackDto = this.feedBackService.getFeedBackById(feedBackId);
			
			String fileName = this.fileService.uploadImage(path, image);
			feedBackDto.setImageName(fileName);
			FeedBackDto updateFeedBack = this.feedBackService.updateFeedback(feedBackDto, feedBackId);
			return new ResponseEntity<FeedBackDto>(updateFeedBack, HttpStatus.OK);

		}
		
		 //method to serve files
	    @GetMapping(value = "/feedback/image/{imageName}",produces = MediaType.IMAGE_JPEG_VALUE)
	    public void downloadImage(
	            @PathVariable("imageName") String imageName,
	            HttpServletResponse response
	    ) throws IOException {

	        InputStream resource = this.fileService.getResource(path, imageName);
	        response.setContentType(MediaType.IMAGE_JPEG_VALUE);
	        StreamUtils.copy(resource,response.getOutputStream())   ;

	    }
		
		
		
		

}
